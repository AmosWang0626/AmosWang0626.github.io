import{_ as n,c as s}from"./app.77a5fe25.js";const a={},p=s(`<h1 id="string-matches-\u6027\u80FD\u6D4B\u8BD5" tabindex="-1"><a class="header-anchor" href="#string-matches-\u6027\u80FD\u6D4B\u8BD5" aria-hidden="true">#</a> String.matches() \u6027\u80FD\u6D4B\u8BD5</h1><blockquote><p>\u6D4B\u8BD5\u673A\uFF1AMac Pro 16GB 2667 MHz DDR4; 2.6GHz \u516D\u6838Intel Core i7</p></blockquote><ul><li>String.matches(&quot;[0-9]+&quot;) 1\u4EBF\u6B21 19880\u6BEB\u79D2</li><li>Pattern.compile(&quot;[0-9]+&quot;).matcher(&quot;[0-9]+&quot;).matches() 1\u4EBF\u6B21 4390\u6BEB\u79D2</li></ul><p>\u7ED3\u8BBA\uFF1AString.matches() \u7684\u6027\u80FD\u8FDC\u4E0D\u5982\u6B63\u5E38\u7684\u6B63\u5219\u8868\u8FBE\u5F0F\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> keyword <span class="token operator">=</span> <span class="token string">&quot;1223323&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">isNumber</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\u8017\u65F6: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>keyword <span class="token operator">+</span> <span class="token string">&quot; \u662F\u7EAF\u6570\u5B57: &quot;</span> <span class="token operator">+</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * \u7EAF\u6570\u5B57(\u6B63\u6574\u6570)
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Pattern</span> POSITIVE_NUMBER <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;[0-9]+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u5C31\u6362\u8FD9\u4E24\u884C\u4EE3\u7801\u6D4B\u8BD5</span>
<span class="token comment">//        return POSITIVE_NUMBER.matcher(&quot;[0-9]+&quot;).matches();</span>
        <span class="token keyword">return</span> keyword<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;[0-9]+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>`,5);function t(e,o){return p}var l=n(a,[["render",t],["__file","1-String.matches()\u6027\u80FD\u6D4B\u8BD5.html.vue"]]);export{l as default};
