import{_ as e,c as n,a,o as i}from"./app-BBRKi3fM.js";const l="/images/article/others/github_vuepress_01.png",r="/images/article/others/github_vuepress_02.png",t="/images/article/others/github_vuepress_03.png",p="/images/article/others/github_vuepress_04.png",d="/images/article/others/github_vuepress_05.png",c="/images/article/others/github_vuepress_06.png",o="/images/article/others/github_vuepress_07.png",u="/images/article/others/github_vuepress_08.png",h="/images/article/others/github_vuepress_09.png",v="/images/article/others/github_vuepress_10.png",m="/images/article/others/github_vuepress_11.png",b="/images/article/others/github_vuepress_12.png",g={};function _(x,s){return i(),n("div",null,s[0]||(s[0]=[a(`<h1 id="vuepress-github-自动化部署" tabindex="-1"><a class="header-anchor" href="#vuepress-github-自动化部署"><span>VuePress + Github 自动化部署</span></a></h1><p>本文着重讲 GitHub 部署，创建 VuePress 官方文档比较详细，就不说啦。</p><h2 id="创建vuepress项目" tabindex="-1"><a class="header-anchor" href="#创建vuepress项目"><span>创建VuePress项目</span></a></h2><p><a href="https://v2.vuepress.vuejs.org/zh/" target="_blank" rel="noopener noreferrer">https://v2.vuepress.vuejs.org/zh/</a></p><p>当然呢，可以参考我的项目</p><p><a href="https://github.com/AmosWang0626/AmosWang0626.github.io" target="_blank" rel="noopener noreferrer">https://github.com/AmosWang0626/AmosWang0626.github.io</a></p><p>使用 yarn 命令打包部署：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># install</span>
<span class="line">yarn install</span>
<span class="line"></span>
<span class="line"># start</span>
<span class="line">yarn dev</span>
<span class="line"></span>
<span class="line"># build</span>
<span class="line">yarn build</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="github-自动化部署" tabindex="-1"><a class="header-anchor" href="#github-自动化部署"><span>Github 自动化部署</span></a></h2><h3 id="步骤概览" tabindex="-1"><a class="header-anchor" href="#步骤概览"><span>步骤概览</span></a></h3><ol><li>创建<strong>个人维度</strong>的 Github Token（后边自动化部署 push 代码需要）</li><li>创建<strong>项目维度</strong>的变量，值就是上一步生成的密钥</li><li>创建流水线，自动化打包发布</li><li>打包发布完成，切换到 gh-pages 分支，等站点自动化部署完，就能访问啦～</li></ol><h3 id="第一步-创建-token" tabindex="-1"><a class="header-anchor" href="#第一步-创建-token"><span>第一步：创建 Token</span></a></h3><p><img src="`+l+'" alt=""></p><p><img src="'+r+'" alt=""></p><p><img src="'+t+'" alt=""></p><h3 id="第二步-创建项目变量" tabindex="-1"><a class="header-anchor" href="#第二步-创建项目变量"><span>第二步：创建项目变量</span></a></h3><p>这里创建项目维度的变量，下一步创建的脚本里边要用到。</p><p>名字就取 ACCESS_TOKEN ，值就是上一步生成的密钥。</p><p><img src="'+p+'" alt=""></p><h3 id="第三步-创建流水线-自动化打包发布" tabindex="-1"><a class="header-anchor" href="#第三步-创建流水线-自动化打包发布"><span>第三步：创建流水线，自动化打包发布</span></a></h3><p><img src="'+d+'" alt=""></p><p>这里前端项目是 node.js 技术栈，就搜索 node 了</p><p><img src="'+c+`" alt=""></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node</span>
<span class="line"># For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs</span>
<span class="line"></span>
<span class="line">name: Node.js CI</span>
<span class="line"></span>
<span class="line">on:</span>
<span class="line">  push:</span>
<span class="line">    branches: [ &quot;master&quot; ]</span>
<span class="line">  pull_request:</span>
<span class="line">    branches: [ &quot;master&quot; ]</span>
<span class="line"></span>
<span class="line">jobs:</span>
<span class="line">  build:</span>
<span class="line"></span>
<span class="line">    runs-on: ubuntu-latest</span>
<span class="line"></span>
<span class="line">    strategy:</span>
<span class="line">      matrix:</span>
<span class="line">        node-version: [18.x]</span>
<span class="line">        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/</span>
<span class="line"></span>
<span class="line">    steps:</span>
<span class="line">      - uses: actions/checkout@v3</span>
<span class="line">      - name: Use Node.js \${{ matrix.node-version }}</span>
<span class="line">        uses: actions/setup-node@v3</span>
<span class="line">        with:</span>
<span class="line">          node-version: \${{ matrix.node-version }}</span>
<span class="line">          cache: &#39;npm&#39;</span>
<span class="line">      - run: npm install yarn -g</span>
<span class="line">      - run: yarn install</span>
<span class="line">      - run: yarn build</span>
<span class="line">      - name: Deploy</span>
<span class="line">        uses: JamesIves/github-pages-deploy-action@v4</span>
<span class="line">        with:</span>
<span class="line">          token: \${{ secrets.ACCESS_TOKEN }}</span>
<span class="line">          branch: gh-pages</span>
<span class="line">          folder: dist</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比自动生成的，只改了这些地方。</p><p><img src="`+o+'" alt=""></p><p>保存之后，就会自己自动化部署了。</p><p>这里常见的问题是push的时候权限不足，遇到这种情况，再检查下第一步、第二步即可。</p><h3 id="第四步-切换分支-自动化部署" tabindex="-1"><a class="header-anchor" href="#第四步-切换分支-自动化部署"><span>第四步：切换分支，自动化部署</span></a></h3><p><img src="'+u+'" alt=""></p><p><img src="'+h+'" alt=""></p><p>进入 Actions 查看进度，等 deploy 完成就能访问了。</p><p>刷新浏览器，可能有几秒缓存，不慌，多刷几次就好了。</p><p><img src="'+v+'" alt=""></p><h2 id="相关问题" tabindex="-1"><a class="header-anchor" href="#相关问题"><span>相关问题：</span></a></h2><h3 id="deploy-时报-403-也即权限不足" tabindex="-1"><a class="header-anchor" href="#deploy-时报-403-也即权限不足"><span>Deploy 时报 403，也即权限不足</span></a></h3><ol><li>检查<strong>个人维度</strong>的 Github Token，Token 的名字随意</li><li>检查<strong>项目维度</strong>的变量设置，变量的名字一定要和 node 脚本里的一致</li></ol><ol><li><ol><li>例如：ACCESS_TOKEN</li></ol></li></ol><h3 id="invalid-username-or-password" tabindex="-1"><a class="header-anchor" href="#invalid-username-or-password"><span>Invalid username or password.</span></a></h3><p><img src="'+m+'" alt=""></p><p>这种就是 token 更新了，需要换下 ACCESS_TOKEN 的值。</p><h3 id="博客部署完成-页面样式错误" tabindex="-1"><a class="header-anchor" href="#博客部署完成-页面样式错误"><span>博客部署完成，页面样式错误</span></a></h3><p>也即静态文件加载不到了。</p><p>这是因为部署的站点不在个人 xxx.github.io 下边，请求路径例如 xxx.github.io/xxx_blog</p><ul><li>静态文件的路径也需要通过 xxx.github.io/xxx_blog/assets/xxx.css 这样访问。</li><li>但默认不配置 base 的时候，是直接在根域名下访问静态文件的，xxx.github.io/assets/xxx.css 这种。</li><li>配置base的时候，两端的 / 不能少哦。</li></ul><p><img src="'+b+'" alt=""></p>',46)]))}const k=e(g,[["render",_],["__file","03.VuePress结合Github自动化部署.html.vue"]]),y=JSON.parse('{"path":"/boutique/front/03.VuePress%E7%BB%93%E5%90%88Github%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2.html","title":"VuePress + Github 自动化部署","lang":"zh-CN","frontmatter":{"title":"VuePress + Github 自动化部署","date":"2023-06-10T00:00:00.000Z","categories":"前端相关","tags":["VuePress","Github"]},"headers":[{"level":2,"title":"创建VuePress项目","slug":"创建vuepress项目","link":"#创建vuepress项目","children":[]},{"level":2,"title":"Github 自动化部署","slug":"github-自动化部署","link":"#github-自动化部署","children":[{"level":3,"title":"步骤概览","slug":"步骤概览","link":"#步骤概览","children":[]},{"level":3,"title":"第一步：创建 Token","slug":"第一步-创建-token","link":"#第一步-创建-token","children":[]},{"level":3,"title":"第二步：创建项目变量","slug":"第二步-创建项目变量","link":"#第二步-创建项目变量","children":[]},{"level":3,"title":"第三步：创建流水线，自动化打包发布","slug":"第三步-创建流水线-自动化打包发布","link":"#第三步-创建流水线-自动化打包发布","children":[]},{"level":3,"title":"第四步：切换分支，自动化部署","slug":"第四步-切换分支-自动化部署","link":"#第四步-切换分支-自动化部署","children":[]}]},{"level":2,"title":"相关问题：","slug":"相关问题","link":"#相关问题","children":[{"level":3,"title":"Deploy 时报 403，也即权限不足","slug":"deploy-时报-403-也即权限不足","link":"#deploy-时报-403-也即权限不足","children":[]},{"level":3,"title":"Invalid username or password.","slug":"invalid-username-or-password","link":"#invalid-username-or-password","children":[]},{"level":3,"title":"博客部署完成，页面样式错误","slug":"博客部署完成-页面样式错误","link":"#博客部署完成-页面样式错误","children":[]}]}],"git":{"updatedTime":1741274305000,"contributors":[{"name":"amos.wang","username":"amos.wang","email":"1833063210@qq.com","commits":1,"url":"https://github.com/amos.wang"}]},"filePathRelative":"boutique/front/03.VuePress结合Github自动化部署.md"}');export{k as comp,y as data};
